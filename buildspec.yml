version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 10
      python: 3.7
    commands:
      - npm i -g serverless
  pre_build:
    commands:
      - pwd
      - export rootDir=$(pwd)
      - echo "Installing python requirements..."
      - pip install 'moto==1.3.13'
      - echo "Running unittest..."
      - cd ${rootDir}/tests/check_sg_port_ingress && python3 -m unittest
      - echo "Tests complete"
      - export ACCOUNT_ALIAS=$(aws iam list-account-aliases --query "AccountAliases[]" --output text)
      - echo ${ACCOUNT_ALIAS}
      - export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query 'Account')
      - echo ${ACCOUNT_ID}

  build:
    commands:
      - role=$(aws sts assume-role --role-arn ${MONITORDEPLOYERARN} --role-session-name monitor-deployer-session --duration-seconds 900)
      - KEY=$(echo $role |awk '{print $5}' |  tr -d '"' | tr -d ',' | tr -d '{' | tr -d '}')
      - SECRET=$(echo $role |awk '{print $7}' |  tr -d '"' | tr -d ',' | tr -d '{' | tr -d '}')
      - TOKEN=$(echo $role |awk '{print $9}' |  tr -d '"' | tr -d ',' | tr -d '{' | tr -d '}')
      - export AWS_ACCESS_KEY_ID=$KEY && export AWS_SESSION_TOKEN=$TOKEN && export AWS_SECRET_ACCESS_KEY=$SECRET
      - export AWS_DEFAULT_REGION=us-west-2
      - echo "Deploying monitoring section..."
      - cd ${rootDir}/monitoring && npm install && sls deploy --stage ${STAGE}
      - echo "Removing sts token..."
      - export AWS_ACCESS_KEY_ID="" && export AWS_SESSION_TOKEN="" && export AWS_SECRET_ACCESS_KEY=""
      - echo "Deploying ${SERVICE}TagSGTermination section..."
      - role2=$(aws sts assume-role --role-arn ${DEPLOYERARN} --role-session-name deployer-session --duration-seconds 900)
      - KEY2=$(echo $role2 |awk '{print $5}' |  tr -d '"' | tr -d ',' | tr -d '{' | tr -d '}')
      - SECRET2=$(echo $role2 |awk '{print $7}' |  tr -d '"' | tr -d ',' | tr -d '{' | tr -d '}')
      - TOKEN2=$(echo $role2 |awk '{print $9}' |  tr -d '"' | tr -d ',' | tr -d '{' | tr -d '}')
      - export AWS_ACCESS_KEY_ID=$KEY2 && export AWS_SESSION_TOKEN=$TOKEN2 && export AWS_SECRET_ACCESS_KEY=$SECRET2
      - cd ${rootDir}/infra/pipeline/monitoring && aws cloudformation deploy --no-fail-on-empty-changeset --template-file ./BuildStatus.yaml --stack-name ${SERVICE}BuildStatusCWEvent --parameter-overrides Service=${SERVICE}      
      - aws cloudformation stack-delete-complete --stack-name ${SERVICE}TagSGTermination
      - cd ${rootDir}/tag_for_termination && npm install && sls deploy --stage ${STAGE}
      - cd ${rootDir}/tag_for_termination && aws cloudformation deploy --no-fail-on-empty-changeset --template-file ./config.yaml --stack-name ${SERVICE}TagSGTermination --parameter-overrides Service=${SERVICE} 
      - echo "Deploying ${SERVICE}CheckSGPortIngress section..."
      - aws cloudformation stack-delete-complete --stack-name ${SERVICE}CheckSGPortIngress
      - cd ${rootDir}/check_sg_port_ingress && npm install && sls deploy --stage ${STAGE}
      - cd ${rootDir}/check_sg_port_ingress && aws cloudformation deploy --no-fail-on-empty-changeset --template-file ./config.yaml --stack-name ${SERVICE}CheckSGPortIngress --parameter-overrides Service=${SERVICE} 

  post_build:
    commands:
      - echo Done!